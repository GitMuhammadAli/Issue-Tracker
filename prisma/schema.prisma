generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  email          String       @unique
  password       String
  role           Role?        @relation(fields: [roleId], references: [id])
  roleId         Int?
  issues         Issue[]      @relation("AssignedIssues")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  teams          TeamMember[]
  reportedIssues Issue[]      @relation("ReportedIssues")
  comments       Comment[]
}

enum RoleName {
  ADMIN
  DEVELOPER
  PROJECT_MANAGER
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users User[]
}

model Issue {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  priority    Priority
  status      Status
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    User?     @relation("AssignedIssues", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User      @relation("ReportedIssues", fields: [reporterId], references: [id])
  reporterId  String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      Int?
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  members   TeamMember[]
  issues    Issue[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   Int
  role     String // Roles in team, like 'Team Lead', 'Developer'
  joinedAt DateTime @default(now())
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
